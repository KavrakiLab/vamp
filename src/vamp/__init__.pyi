"""
This type stub file was generated by pyright.
"""
__all__: list[str]

from pathlib import Path
from typing import Any, Dict, Optional, Tuple, Union

from numpy import float_
from numpy.typing import NDArray

from vamp._core import Cuboid as Cuboid
from vamp._core import Cylinder as Cylinder
from vamp._core import Environment as Environment
from vamp._core import PRMNeighborParams as PRMNeighborParams
from vamp._core import PRMSettings as PRMSettings
from vamp._core import RRTCSettings as RRTCSettings
from vamp._core import FCITNeighborParams as FCITNeighborParams
from vamp._core import FCITSettings as FCITSettings
from vamp._core import SimplifySettings as SimplifySettings
from vamp._core import Sphere as Sphere
from vamp._core import baxter as baxter
from vamp._core import fetch as fetch
from vamp._core import panda as panda
from vamp._core import sphere as sphere
from vamp._core import ur5 as ur5
from vamp.constants import *
"""
This type stub file was generated by pyright.
"""
AnyPlanningResult = Union[
    sphere.PlanningResult,
    ur5.PlanningResult,
    panda.PlanningResult,
    fetch.PlanningResult,
    baxter.PlanningResult,
    ]


def png_to_heightfield(
        filename: Path, center: Tuple[float, float, float], scaling: Tuple[float, float, float]
    ):
    ...


def configure_robot_and_planner_with_kwargs(robot_name: str, planner_name: str, **kwargs):
    ...


def problem_dict_to_vamp(problem: dict[str, list[dict[str, float | NDArray[float_]]]]) -> Environment:
    ...


def results_to_dict(
        planning_result: AnyPlanningResult,
        simplification_result: Optional[AnyPlanningResult] = ...
    ) -> Dict[str, Any]:
    ...


def __dir__() -> list[str]:
    symbols = set(globals().keys())
    symbols -= {"_vamp_ext"}
    return list(symbols)
